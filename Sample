stages:
  - build
  - deploy

variables:
  KUBE_NAMESPACE: "airflow"
  KUBE_CONTEXT: "minikube"
  IMAGE_TAG: "$CI_REGISTRY_IMAGE/airflow:$CI_COMMIT_SHORT_SHA"
  PUSH_REGISTRY: "false"

build-airflow-image:
  stage: build
  tags: ["local"]   # Windows runner tag
  script:
    - powershell -NoProfile -Command "
        Write-Host 'Building image:' $env:IMAGE_TAG;
        docker build -t $env:IMAGE_TAG .;
        if ($LASTEXITCODE -ne 0) { throw 'docker build failed' };
        Write-Host 'Saving image to image.tar';
        docker save -o image.tar $env:IMAGE_TAG;
        if (-not (Test-Path -Path image.tar)) { throw 'image.tar not created' };
        if ($env:PUSH_REGISTRY -eq 'true') {
          docker login -u $env:CI_REGISTRY_USER -p $env:CI_REGISTRY_PASSWORD $env:CI_REGISTRY;
          docker push $env:IMAGE_TAG;
        }
      "
  artifacts:
    paths:
      - image.tar
    expire_in: 1h
    reports:
      dotenv:
        - build.env
  after_script:
    - echo IMAGE_TAG="$IMAGE_TAG" > build.env

deploy-minikube:
  stage: deploy
  tags: ["local"]   # Windows runner tag
  needs: ["build-airflow-image"]
  script:
    - powershell -NoProfile -Command "
        [IO.File]::WriteAllBytes('$PWD\\kubeconfig.yaml', [Convert]::FromBase64String($env:KUBE_CONFIG));
        $env:KUBECONFIG = '$PWD\\kubeconfig.yaml';
        kubectl config use-context $env:KUBE_CONTEXT;

        kubectl apply -n $env:KUBE_NAMESPACE -f k8s/postgres-pvc.yaml;
        kubectl apply -n $env:KUBE_NAMESPACE -f k8s/postgres-deployment.yaml;
        kubectl apply -n $env:KUBE_NAMESPACE -f k8s/postgres-service.yaml;
        kubectl apply -n $env:KUBE_NAMESPACE -f k8s/airflow-config.yaml;
        kubectl apply -n $env:KUBE_NAMESPACE -f k8s/airflow-deployment.yaml;
        kubectl apply -n $env:KUBE_NAMESPACE -f k8s/airflow-scheduler.yaml;
        kubectl apply -n $env:KUBE_NAMESPACE -f k8s/airflow-service.yaml;

        if (Test-Path -Path '$PWD\\image.tar') {
          minikube image load --input image.tar;
        }

        kubectl -n $env:KUBE_NAMESPACE set image deploy/airflow-web airflow-web=$env:IMAGE_TAG --record;
        kubectl -n $env:KUBE_NAMESPACE set image deploy/airflow-scheduler scheduler=$env:IMAGE_TAG --record;

        kubectl rollout status deploy/airflow-web -n $env:KUBE_NAMESPACE --timeout=300s;
        kubectl rollout status deploy/airflow-scheduler -n $env:KUBE_NAMESPACE --timeout=300s;

        kubectl get pods -n $env:KUBE_NAMESPACE -o wide;
        kubectl get svc -n $env:KUBE_NAMESPACE -o wide;
      "
  dependencies:
    - build-airflow-image
