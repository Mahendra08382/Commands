# =========================
#  Snowflake Flask endpoints
# =========================
from flask import Flask, jsonify, abort

app = Flask(__name__)

# Hardcode per your table location
database = "DDM_TEST"
schema = "EMPLOYEE"

def fetch_top10(table_name: str):
    if not table_name or not table_name.replace('_', '').isalnum():
        raise ValueError("Invalid table name.")
    sql = f'SELECT * FROM "{database}"."{schema}"."{table_name.upper()}" LIMIT 10'
    print(f"[sfapi] Executing SQL: {sql}")  # will print in your terminal

    # reuse your existing helpers already defined above
    passphrase, pem = get_pass_cert_from_client(account_name, devops_id_full)
    con = connect_2_snowflake_db(pem, passphrase, devops_id_full, account_name, devops_id_role)

    try:
        with con.cursor() as cur:
            cur.execute(sql)
            cols = [c[0] for c in cur.description]
            rows = cur.fetchall()
        return [dict(zip(cols, r)) for r in rows]
    finally:
        try:
            con.close()
        except Exception:
            pass

@app.get("/sfapi/health")
def sf_health():
    return {"status": "ok"}

@app.get("/sfapi/routes")
def sf_routes():
    return jsonify(sorted([str(r) for r in app.url_map.iter_rules()]))

@app.get("/sfapi/table/<string:table_name>")
def sf_table_top10(table_name: str):
    try:
        data = fetch_top10(table_name)
        return jsonify(data)
    except ValueError as ve:
        abort(400, str(ve))
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    # use a different port to avoid whatever is on 8000
    app.run(host="127.0.0.1", port=5051, debug=True)
